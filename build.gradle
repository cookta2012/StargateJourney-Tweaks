//file:noinspection GroovyUnusedAssignment
buildscript {
    repositories {
        maven { url 'https://plugins.gradle.org/m2/' }
        maven { url 'https://repo.spongepowered.org/repository/maven-public/' }
    }
    dependencies {
        classpath 'org.spongepowered:mixingradle:0.7.+'
        classpath 'com.diffplug.eclipse.apt:com.diffplug.eclipse.apt.gradle.plugin:3.37.0'
    }
}

plugins {
    id 'eclipse'
    id 'idea'
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
    //id 'org.spongepowered.mixin'   version '0.7.+'   // release on plugin portal
}

apply plugin: 'com.diffplug.eclipse.apt'
apply plugin: 'org.spongepowered.mixin'

version = mod_version
group = mod_group_id

base {
    archivesName = "${mod_name}-${minecraft_version}"
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)


println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    mappings channel: mapping_channel, version: mapping_version

    // Required for ProcessResources task
    copyIdeResources = true

    //accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        configureEach {
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"

            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            //property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        client {
            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            property 'forge.enabledGameTestNamespaces', mod_id
            workingDirectory project.file('run')
        }

        server {
            property 'forge.enabledGameTestNamespaces', mod_id
            args '--nogui'
            workingDirectory project.file('run-server')
        }

        // This run config launches GameTestServer and runs all registered gametests, then exits.
        // By default, the server will crash when no gametests are provided.
        // The gametest system is also enabled by default for other run configs under the /test command.
        gameTestServer {
            property 'forge.enabledGameTestNamespaces', mod_id
            workingDirectory project.file('run-test-server')
        }

        data {
            workingDirectory project.file('run-data')

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven {
        name = "Modrinth"
        url = "https://api.modrinth.com/maven"
        content {
            includeGroup "maven.modrinth"
        }
    }
    maven {
        url "https://squiddev.cc/maven/"
        content {
            includeGroup("cc.tweaked")
            includeModule("org.squiddev", "Cobalt")
            includeModule("fuzs.forgeconfigapiport", "forgeconfigapiport-fabric")
        }
    }
    maven {
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    annotationProcessor "org.spongepowered:mixin:0.8.5:processor"
    implementation fg.deobf("curse.maven:sgjourney-689083:6390662")
}

def mixinPackage   = "com.cookta2012.${mod_id}.mixin"
def pluginPackage  = "${mixinPackage}.plugin"
def pluginClass    = "SGTweaksMixinPlugin"
def pluginFqn      = "${pluginPackage}.${pluginClass}"

def mixinBaseName  = "mixins.${mod_id}"
def mixinConfigFile = file("${buildDir}/generated/${mixinBaseName}.json")



mixin {
    add sourceSets.main, "${mixinBaseName}.refmap.json"
    config "${mixinBaseName}.json"                    // instead of hard-coded name
}

/*
tasks.named('processResources', ProcessResources).configure {
    //var replaceProperties = []
    //inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand(
                version: project.version,
                mod_id: project.mod_id
        )
    }
}
*/
import groovy.io.FileType

task generateMixinConfig {
    doLast {
        def mixinsDir = file("src/main/java/" + mixinPackage.replace('.', '/'))
        def mixinList = []

        if (mixinsDir.exists()) {
            mixinsDir.eachFileRecurse(FileType.FILES) { file ->
                if (file.name.endsWith('.java')) {                // filter here
                    def relPath = file.path.substring(mixinsDir.path.length() + 1)
                    def fqcn    = relPath.replace(File.separatorChar, '.' as char)
                                          .replaceFirst(/\.java$/, '')
                    mixinList << fqcn
                }
            }
        }
        
        
        /* 2. check if the plugin file exists ------------------------- */
        def pluginFile = file("src/main/java/" +
                              pluginPackage.replace('.', '/') +
                              "/${pluginClass}.java")
                              

        def json = [
            required: true,
            package: mixinPackage,
            mixins: mixinList,
            refmap: "${mixinBaseName}.refmap.json",
            compatibilityLevel: "JAVA_17",
            minVersion: "0.8",
            injectors: [ defaultRequire: 1 ] 
        ]
        
        if (pluginFile.exists()) {                              // <--- new
            json['plugin'] = pluginFqn
        }

        mixinConfigFile.parentFile.mkdirs()
        mixinConfigFile.text = groovy.json.JsonOutput.prettyPrint(groovy.json.JsonOutput.toJson(json))
    }
}





tasks.named('processResources', ProcessResources).configure {
    dependsOn generateMixinConfig

    def sgjourneyVersion = project.findProperty("sgjourney_version") ?: "[0.0.0]"
    def mcVersionRange = project.findProperty("mc_version_range") ?: "[1.20.1,)"
    def modId = project.findProperty("mod_id") ?: "missingmodid"
    def modName = project.findProperty("mod_name") ?: "Missing Mod Name"
    def modVersion = project.findProperty("mod_version") ?: "0.0.0"
    def modDescription = project.findProperty("mod_description") ?: "No Description"
    def modLicense = project.findProperty("mod_license") ?: "All Rights Reserved"

    // Dynamically build the mixins block
    def mixinsBlock = ""
    def mixinConfigs = ["mixins.${modId}.json"]

    if (!mixinConfigs.isEmpty()) {
        mixinsBlock = mixinConfigs.collect { cfg ->
            """[[mixins]]
config="${cfg}"
"""
        }.join('\n')
    }

    from(mixinConfigFile) {
        into "/"
    }

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand(
            mod_id: modId,
            mod_name: modName,
            mod_version: modVersion,
            mod_description: modDescription,
            mod_license: modLicense,
            sgjourney_version: sgjourneyVersion,
            mc_version_range: mcVersionRange,
            mixins_block: mixinsBlock,
            version: project.version
        )
    }
}



tasks.named('jar', Jar).configure {
    manifest {
        attributes([
                'Specification-Title'     : mod_id,
                'Specification-Vendor'    : "cookta2012",
                'Specification-Version'   : '1', // We are version 1 of ourselves
                'Implementation-Title'    : project.name,
                'Implementation-Version'  : project.jar.archiveVersion,
                'Implementation-Vendor'   : "cookta2012",
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }

    finalizedBy 'reobfJar'
}

tasks.withType(JavaCompile).configureEach {
  	//options.compilerArgs += "-Amixin.disableTargetValidator=true"
    options.encoding = 'UTF-8'
}

